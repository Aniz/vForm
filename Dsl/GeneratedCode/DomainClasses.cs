//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.visualForm
{
	/// <summary>
	/// DomainClass FormModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.visualForm.FormModel.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.visualForm.FormModel.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.visualForm.visualFormDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0065f1d6-000e-44ac-bd45-743db4e444a1")]
	public partial class FormModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FormModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0065f1d6, 0x000e, 0x44ac, 0xbd, 0x45, 0x74, 0x3d, 0xb4, 0xe4, 0x44, 0xa1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Form> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Form>, Form>(global::Ufba.visualForm.FormModelHasElements.FormModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.visualForm.Form.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.visualForm.Form sourceForm1 = sourceElement as global::Ufba.visualForm.Form;
			if (sourceForm1 != null)
			{
				// Create link for path FormModelHasElements.Elements
				this.Elements.Add(sourceForm1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.visualForm.Form sourceForm1 = sourceElement as global::Ufba.visualForm.Form;
			if (sourceForm1 != null)
			{
				// Delete link for path FormModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Ufba.visualForm.FormModelHasElements.GetLinks((global::Ufba.visualForm.FormModel)this, sourceForm1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.visualForm.FormModelHasElements.FormModelDomainRoleId, global::Ufba.visualForm.FormModelHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.visualForm
{
	/// <summary>
	/// DomainClass Form
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.visualForm.Form.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.visualForm.Form.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.visualForm.visualFormDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0f56c2ab-86bd-409d-b2ea-9ca392397f0e")]
	public partial class Form : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Form domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f56c2ab, 0x86bd, 0x409d, 0xb2, 0xea, 0x9c, 0xa3, 0x92, 0x39, 0x7f, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Form(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Form(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x93b822a3, 0x537e, 0x4ad2, 0xa7, 0x21, 0x54, 0x54, 0xbd, 0x26, 0x24, 0xfa);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.visualForm.Form.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.visualForm.Form/Name.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.visualForm.Form/Name.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("93b822a3-537e-4ad2-a721-5454bd2624fa")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Form.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Form, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Form.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Form.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Form element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Form element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FormModel opposite domain role accessor
		/// <summary>
		/// Gets or sets FormModel.
		/// </summary>
		public virtual FormModel FormModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.visualForm.FormModelHasElements.ElementDomainRoleId) as FormModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.visualForm.FormModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for Ufba.visualForm.FormHasFields.Form
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::Ufba.visualForm.FormHasFields.FormDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.visualForm.Field.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.visualForm.Field sourceField1 = sourceElement as global::Ufba.visualForm.Field;
			if (sourceField1 != null)
			{
				// Create link for path FormHasFields.Fields
				this.Fields.Add(sourceField1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.visualForm.Field sourceField1 = sourceElement as global::Ufba.visualForm.Field;
			if (sourceField1 != null)
			{
				// Delete link for path FormHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::Ufba.visualForm.FormHasFields.GetLinks((global::Ufba.visualForm.Form)this, sourceField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.visualForm.FormHasFields.FormDomainRoleId, global::Ufba.visualForm.FormHasFields.FieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.visualForm
{
	/// <summary>
	/// DomainClass Field
	/// Description for Ufba.visualForm.Field
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.visualForm.Field.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.visualForm.Field.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.visualForm.visualFormDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fc2a54be-8983-4477-aea7-dbd0cc5915bb")]
	public partial class Field : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc2a54be, 0x8983, 0x4477, 0xae, 0xa7, 0xdb, 0xd0, 0xcc, 0x59, 0x15, 0xbb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x78a2ea69, 0xfa76, 0x4d7e, 0x9d, 0x95, 0x6f, 0xa2, 0x7a, 0x74, 0x87, 0xe8);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.visualForm.Field.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.visualForm.Field/Name.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.visualForm.Field/Name.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("78a2ea69-fa76-4d7e-9d95-6fa27a7487e8")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x9ce27032, 0x167d, 0x452f, 0x99, 0x5c, 0x70, 0x56, 0xa1, 0x60, 0x58, 0x5d);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private FieldType typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Ufba.visualForm.Field.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.visualForm.Field/Type.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.visualForm.Field/Type.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9ce27032-167d-452f-995c-7056a160585d")]
		public FieldType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, FieldType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed FieldType GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, FieldType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				FieldType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Required domain property code
		
		/// <summary>
		/// Required domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredDomainPropertyId = new global::System.Guid(0xd8acf008, 0x2485, 0x4461, 0xbe, 0x81, 0xc0, 0x8e, 0xf2, 0xea, 0xd7, 0x85);
		
		/// <summary>
		/// Storage for Required
		/// </summary>
		private global::System.Boolean requiredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Required domain property.
		/// Description for Ufba.visualForm.Field.Required
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.visualForm.Field/Required.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.visualForm.Field/Required.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d8acf008-2485-4461-be81-c08ef2ead785")]
		public global::System.Boolean Required
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return requiredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RequiredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Required domain property.
		/// </summary>
		internal sealed partial class RequiredPropertyHandler : DslModeling::DomainPropertyValueHandler<Field, global::System.Boolean>
		{
			private RequiredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Required domain property value handler.
			/// </summary>
			public static readonly RequiredPropertyHandler Instance = new RequiredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Required domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RequiredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.requiredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.requiredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Form opposite domain role accessor
		/// <summary>
		/// Gets or sets Form.
		/// Description for Ufba.visualForm.FormHasFields.Field
		/// </summary>
		public virtual Form Form
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.visualForm.FormHasFields.FieldDomainRoleId) as Form;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.visualForm.FormHasFields.FieldDomainRoleId, value);
			}
		}
		#endregion
		#region Options opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Options.
		/// Description for Ufba.visualForm.FieldHasOptions.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Option> Options
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Option>, Option>(global::Ufba.visualForm.FieldHasOptions.FieldDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.visualForm.Option.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.visualForm.Option sourceOption1 = sourceElement as global::Ufba.visualForm.Option;
			if (sourceOption1 != null)
			{
				// Create link for path FieldHasOptions.Options
				this.Options.Add(sourceOption1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.visualForm.Option sourceOption1 = sourceElement as global::Ufba.visualForm.Option;
			if (sourceOption1 != null)
			{
				// Delete link for path FieldHasOptions.Options
				
				foreach (DslModeling::ElementLink link in global::Ufba.visualForm.FieldHasOptions.GetLinks((global::Ufba.visualForm.Field)this, sourceOption1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.visualForm.FieldHasOptions.FieldDomainRoleId, global::Ufba.visualForm.FieldHasOptions.OptionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.visualForm
{
	/// <summary>
	/// DomainClass Option
	/// Description for Ufba.visualForm.Option
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.visualForm.Option.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.visualForm.Option.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.visualForm.visualFormDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8161a441-8c02-443b-8a0b-031833caf0a3")]
	public partial class Option : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Option domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8161a441, 0x8c02, 0x443b, 0x8a, 0x0b, 0x03, 0x18, 0x33, 0xca, 0xf0, 0xa3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Option(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Option(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb87777a2, 0x6138, 0x40ef, 0x8a, 0xad, 0x93, 0x5e, 0x79, 0x89, 0xa6, 0xf2);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.visualForm.Option.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.visualForm.Option/Name.DisplayName", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.visualForm.Option/Name.Description", typeof(global::Ufba.visualForm.visualFormDomainModel), "Ufba.visualForm.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b87777a2-6138-40ef-8aad-935e7989a6f2")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Option.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Option, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Option.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Option.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Option element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Option element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Field opposite domain role accessor
		/// <summary>
		/// Gets or sets Field.
		/// Description for Ufba.visualForm.FieldHasOptions.Option
		/// </summary>
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.visualForm.FieldHasOptions.OptionDomainRoleId) as Field;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.visualForm.FieldHasOptions.OptionDomainRoleId, value);
			}
		}
		#endregion
	}
}
